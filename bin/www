#!/usr/bin/env node

/**
 * Module Dependencies
 */
const http = require("http");
const app = require("../app");
const debug = require("debug")("library-management-system-backend:server");

/**
 * Gets the port from the environment and stores it in Express.
 */
const PORT = normalizePort(process.env.PORT || "8000");
app.set("port", PORT);

/**
 * Creates the HTTP server.
 */
const server = http.createServer(app);

/**
 * Listens on the provided port, and all other network interfaces.
 */
server.listen(PORT);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalizes the Port Number into a number, string, or a boolean false value.
 * @param value {unknown}
 * @returns
 */
function normalizePort(value) {
  const port = parseInt(value, 10);

  // The Named Pipe
  if (isNaN(port)) {
    return value;
  }

  // The Port Number
  if (port >= 0) {
    return port;
  }

  // Port value was not found.
  return false;
}

/**
 * The Event Listener for the HTTP server "error" event.
 * @param error
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof PORT === "string" ? "Pipe " + PORT : "Port " + PORT;

  // Handles specific listen errors with friendly messages.
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges.");
      process.exit(1);
      break;

    case "EADDRINUSE":
      process.error(bind + " is already in use.");
      process.exit(1);
      break;

    default:
      throw error;
  }
}

/**
 * The Event Listener for HTTP server "listening" event.
 */
function onListening() {
  const address = server.address();
  const bind =
    typeof address === "string" ? "pipe " + address : "port " + address.port;
  debug("Listening on " + bind);
}
